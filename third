;Still no type checking. Don't give up until the very end!
(defun abs. (x) (if (> x 0) x (- 0 x))) 
(defun minusp. (x) (if (< x 0) t)) 
(defun plusp. (x) (if (> x 0) t))

;A better symbol for not equal or /=
;might be <>, as this reflects how 
;not equal is defined here.
(defun >=. (x y) (or (> x y) (= x y)))
(defun <=. (x y) (or (< x y) (= x y))) 
(defun /=. (x y) (or (< x y) (> x y)))

;Now, both /= and <> will be acceptable.
(defun <>. (x y) (or (< x y) (> x y)))

for F=0 and T=1
if then else returns
F..NA...F....F
F..NA...T....T
T..F....NA...F
T..T....NA...T

;The NA(s) indicate "not applicable", the parts of the if statement 
;that are ignored depending on what returns true. In standard 
;logic tables, an if form is similar to a "b" logic gate, which 
;returns true only if the second input is true. 
 
