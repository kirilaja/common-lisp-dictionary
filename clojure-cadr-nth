;Common Lisp wrapped in Closure


;Miss car, cdr, cadr etc?..third through tenth? Well, here they are.
;Note that Clojure will not let you define car and cdr derivatives 
;without defining car and cdr beforehand. Weird, huh?...


;These work on quoted, literal: lists, vectors and sets.
;These were not unit-tested past that. Notice the redundant 
;seq xs which will probably cause trouble. But, hey, 
;Rich Hickey says "the JVM can handle that"...
;For use as common lisp definitions: (seq x)->x, [x]->x 
;and defn->defun.

(defn car [x] (first (seq x)))
(defn cdr [x] (rest (seq x)))
(defn caaaar [x] (car (car (car (car (seq x))))))  
(defn caaadr [x] (car (car (car (cdr (seq x))))))  
(defn caaar [x] (car (car (car (seq x)))))  
(defn caadar [x] (car (car (cdr (car (seq x))))))   
(defn caaddr [x] (car (car (cdr (cdr (seq x))))))   
(defn caadr [x] (car (car (cdr (seq x)))))   
(defn caar [x] (car (car (seq x))))   
(defn cadaar [x] (car (cdr (car (car (seq x))))))    
(defn cadadr [x] (car (cdr (car (cdr (seq x))))))   
(defn cadar [x] (car (cdr (car (seq x)))))   
(defn caddar [x] (car (cdr (cdr (car (seq x))))))   
(defn cadddr [x] (car (cdr (cdr (cdr (seq x))))))   
(defn caddr [x] (car (cdr (cdr (seq x)))))   
(defn cadr [x] (car (cdr (seq x))))   
(defn cdaaar [x] (cdr (car (car (car (seq x)))))) 
(defn cdaadr [x] (cdr (car (car (cdr (seq x))))))  
(defn cdaar [x] (cdr (car (car (seq x)))))  
(defn cdadar [x] (cdr (car (cdr (car (seq x))))))  
(defn cdaddr [x] (cdr (car (cdr (cdr (seq x))))))  
(defn cdadr [x] (cdr (car (cdr (seq x)))))  
(defn cdar [x] (cdr (car (seq x))))  
(defn cddaar [x] (cdr (cdr (car (car (seq x))))))  
(defn cddadr [x] (cdr (cdr (car (cdr (seq x))))))  
(defn cddar [x] (cdr (cdr (car (seq x)))))  
(defn cdddar [x] (cdr (cdr (cdr (car (seq x))))))  
(defn cddddr [x] (cdr (cdr (cdr (cdr (seq x))))))  
(defn cdddr [x] (cdr (cdr (cdr (seq x)))))  
(defn cddr [x] (cdr (cdr (seq x))))  
 
;Clojure defines first and second

(defn third [x] (car (cdr (cdr (seq x))))) 
(defn fourth [x] (car (cdr (cdr (cdr (seq x)))))) 
(defn fifth [x] (car (cdr (cdr (cdr (cdr (seq x))))))) 
(defn sixth [x] (car (cdr (cdr (cdr (cdr (cdr (seq x)))))))) 
(defn seventh [x] (car (cdr (cdr (cdr (cdr (cdr (cdr (seq x))))))))) 
(defn eighth [x] (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (seq x)))))))))) 
(defn ninth [x] (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (seq x))))))))))) 
(defn tenth [x] (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (seq x)))))))))))) 
